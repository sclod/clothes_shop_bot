from telebot import types
from db.db import *
from admin import *
from bot_shared import bot
import ast


@bot.message_handler(commands=['start'])
def start(message):
    try:
        db = Databases("database.db")
        db.connect()
        db.create_table_users()
        if not db.user_exists(message.from_user.id):
            db.add_user_to_db(message.from_user.id, message.from_user.username, 'user')
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("üî∞ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
            button2 = types.KeyboardButton("‚ùì FAQ")
            button3 = types.KeyboardButton("üõç –ö–æ—à–∏–∫")
            keyboard.add(button1, button2)
            keyboard.add(button3)
            bot.send_message(message.from_user.id, text='–í—ñ—Ç–∞—é –≤–∞—Å —É –º–æ—î–º—É –º–∞–≥–∞–∑–∏–Ω—ñ, –£ –º–µ–Ω–µ –±–∞–≥–∞—Ç–æ –æ–¥—è–≥—É –Ω–∞ –±—É–¥—å-—è–∫–∏–π —Å–º–∞–∫!', reply_markup=keyboard)
        else:
            main_menu_buttons = types.InlineKeyboardMarkup(row_width=2)
            menu_button = types.InlineKeyboardButton(text='¬ÆÔ∏è –û–¥—è–≥', callback_data='all_clothes')
            menu_button1 = types.InlineKeyboardButton(text='¬©Ô∏è –ê–∫—Å–µ—Å—É–∞—Ä–∏', callback_data='clothes_access')
            menu_new = types.InlineKeyboardButton(text='üî• –ù–æ–≤–µ –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è üî•', callback_data='new_clothes')
            menu_button2 = types.InlineKeyboardButton(text='üõç –ö–æ—à–∏–∫', callback_data='basket')
            menu_button3 = types.InlineKeyboardButton(text='‚å®Ô∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞', callback_data='help')
            main_menu_buttons.add(menu_button, menu_button1)
            main_menu_buttons.add(menu_new)
            main_menu_buttons.add(menu_button2, menu_button3)
            bot.send_message(message.chat.id, text=
                            f'‚è≥  –†–∞–±–æ—Ç–∞–µ–º —Å 10:00 –¥–æ 23.00:\n'
                            , reply_markup=main_menu_buttons)
    except Exception as e:
        print(e)


@bot.message_handler(func=lambda message: message.text == "üî∞ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
def main_menu(message):
    start(message)


@bot.message_handler(func=lambda message: message.text == "‚ùì FAQ")
def FAQ_descr(message):
    bot.send_message(message.chat.id, text='–¢—É—Ç –±—É–¥–µ –æ–ø–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏, —Ü—ñ–Ω–∏, –ø–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –∫—Ä—á!')


@bot.message_handler(func=lambda message: message.text == "üõç –ö–æ—à–∏–∫")
def basket(message):
    try:
        db = Databases("database.db")
        db.connect()

        user_id = message.chat.id
        basket_items = db.fetch_basket_items(user_id)
        count = db.get_all_count_basket(user_id)
        list_dasdasd = db.get_id(user_id)
        listok = []

        for item in list_dasdasd:
            listok.append(item[0])  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ –≤ —Å–ø–∏—Å–æ–∫
        print(basket_items)
        if basket_items:
            number_id = 0
            id, image = basket_items[number_id]
            current_id = number_id

            markup_order = types.InlineKeyboardMarkup()
            prev = types.InlineKeyboardButton(text='<', callback_data=f'prev_{number_id}_{listok}')
            button = types.InlineKeyboardButton(text=f' {number_id + 1} / {count}', callback_data='b')
            next_product = types.InlineKeyboardButton(text='>', callback_data=f'next_{number_id}_{listok}')
            send_BOG = types.InlineKeyboardButton(text='–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data=f'sendbog_{image}')
            deletebuttons = types.InlineKeyboardButton(text='‚ùå', callback_data=f'delete2_{current_id}_{listok}')
            back1 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back1')
            markup_order.add(prev, button, next_product, back1, send_BOG, deletebuttons)
            bot.send_message(message.chat.id, text=f'–ö–æ—à–∏–∫:\n{image}', reply_markup=markup_order, disable_web_page_preview=False)
        else:
            start(message)
    except Exception as e:
        print(e)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    try:
        db = Databases("database.db")
        db.connect()
        req = call.data.split('_')
        if call.data == 'all_clothes':
            clothes_menu_buttons = types.InlineKeyboardMarkup(row_width=1)
            clothes_menu_buttons1 = types.InlineKeyboardButton(text='üß¢ –ì–æ–ª–æ–≤–Ω–∏–π —É–±—ñ—Ä', callback_data='clothes_headdress')
            clothes_menu_buttons2 = types.InlineKeyboardButton(text='üëï –í–µ—Ä—Ö–Ω—ñ–π –æ–¥—è–≥', callback_data='clothes_outerwear')
            clothes_menu_buttons3 = types.InlineKeyboardButton(text='üëñ –ù–∏–∂–Ω—ñ–π –æ–¥—è–≥', callback_data='clothes_underwear')
            clothes_menu_buttons4 = types.InlineKeyboardButton(text='üëü –í–∑—É—Ç—Ç—è', callback_data='clothes_shoes')
            clothes_menu_buttons5 = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back1')
            clothes_menu_buttons.add(clothes_menu_buttons1, clothes_menu_buttons2, clothes_menu_buttons3, clothes_menu_buttons4, clothes_menu_buttons5)
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text='üìå –í—ã–±–∏—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–µ–∂–¥—ã üìå', reply_markup=clothes_menu_buttons)       
    except Exception as e:
        print(e)

    # –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if call.data == 'help':
        try:
            help_buttons = types.InlineKeyboardMarkup(row_width=1)
            help_button1 = types.InlineKeyboardButton(text='üîó–ó–≤\'—è–∑–∞—Ç–∏—Å—å –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–ºüîó', url='https://t.me/hatredmark')
            help_button2 = types.InlineKeyboardButton(text='üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–ºüîó', url='https://www.instagram.com/hatredmarket/')
            help_button3 = types.InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='back1')
            help_buttons.add(help_button1, help_button2, help_button3)
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text='‚ôøÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚ôøÔ∏è', reply_markup=help_buttons)
        except Exception as e:
            print(e)

    # –í—ã–±–æ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–µ–∂–¥—ã
    if req[0] == 'clothes':
        try:
            types_clothes = req[1]
            if types_clothes == 'headdress' or 'outerwear' or 'underwear' or 'shoes' or 'access':
                by_one_id = db.fetch_types_clothes_by_id(types_clothes,1)
                all_count = db.get_all_count(types_clothes)
                if by_one_id:
                    markup_order = types.InlineKeyboardMarkup()
                    current_product = by_one_id[0]
                    id, name, price, discr, img = current_product
                    button = types.InlineKeyboardButton(text=f'{id} / {all_count}', callback_data='b')
                    next = types.InlineKeyboardButton(text=f'>', callback_data=f'right_{id+1}_{types_clothes}')
                    back = types.InlineKeyboardButton(text=f'<', callback_data=f'left_{id-1}_{types_clothes}')
                    
                    markup_order.row(back,button,next)
                    button_busket = types.InlineKeyboardButton(text = 'üõç –í –∫–æ—à–∏–∫', callback_data=f'inbasket_{id}_{img}')
                    if types_clothes == 'access':
                        back = types.InlineKeyboardButton(text = 'üîö–ù–∞–∑–∞–¥', callback_data='back1')
                    else:
                        back = types.InlineKeyboardButton(text = 'üîö–ù–∞–∑–∞–¥', callback_data='all_clothes')
                    markup_order.row(button_busket, back)
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=
                                            f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {name}\n'+
                                            f'–¶–µ–Ω–∞: {price}$\n'+
                                            f'–û–ø–∏—Å–∞–Ω–∏–µ: {discr}\n'+
                                            f'<a href="{img}">&#8205;</a>'
                                            ,reply_markup=markup_order,disable_web_page_preview=False)
                    
                    
                else:
                    bot.answer_callback_query(callback_query_id=call.id, text="–£ –¥–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
        except Exception as e:
            print(e)

    # –ù–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤–ø—Ä–∞–≤–æ
    if req[0] == 'right':
        try:
            next_id = req[1]
            types_clothes = req[2]
            by_one_id = db.fetch_types_clothes_by_id(types_clothes,next_id)
            all_count = db.get_all_count(types_clothes)
            if by_one_id:
                    markup_order = types.InlineKeyboardMarkup()
                    current_product = by_one_id[0]
                    id, name, price, discr, img = current_product
                    button = types.InlineKeyboardButton(text=f'{id} / {all_count}', callback_data='b')
                    next = types.InlineKeyboardButton(text=f'>', callback_data=f'right_{id+1}_{types_clothes}')
                    back = types.InlineKeyboardButton(text=f'<', callback_data=f'left_{id-1}_{types_clothes}')
                    markup_order.row(back,button,next)

                    button_busket = types.InlineKeyboardButton(text = 'üõç –í –∫–æ—à–∏–∫', callback_data=f'inbasket_{id}_{img}')
                    back = types.InlineKeyboardButton(text = 'üîö–ù–∞–∑–∞–¥', callback_data='all_clothes')
                    markup_order.row(button_busket, back)
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=
                                            f'–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: {name}\n'+
                                            f'–¶—ñ–Ω–∞: {price}$\n'+
                                            f'–û–ø–∏—Å: {discr}\n'+
                                            f'<a href="{img}">&#8205;</a>'
                                            ,reply_markup=markup_order,disable_web_page_preview=False)
            else:
                bot.answer_callback_query(callback_query_id=call.id, text='–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î!')
        except Exception as e:
            print(e)

    # –ù–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤–ª–µ–≤–æ
    if req[0] == 'left':
        try:
            next_id = req[1]
            types_clothes = req[2]
            by_one_id = db.fetch_types_clothes_by_id(types_clothes, next_id)
            all_count = db.get_all_count(types_clothes)
            if by_one_id:
                    markup_order = types.InlineKeyboardMarkup()
                    current_product = by_one_id[0]
                    id, name, price, discr, img = current_product
                    button = types.InlineKeyboardButton(text=f'{id} / {all_count}', callback_data='b')
                    next = types.InlineKeyboardButton(text=f'>', callback_data=f'right_{id+1}_{types_clothes}')
                    back = types.InlineKeyboardButton(text=f'<', callback_data=f'left_{id-1}_{types_clothes}')
                    markup_order.row(back,button,next)

                    button_busket = types.InlineKeyboardButton(text = 'üõç –í –∫–æ—à–∏–∫', callback_data=f'inbasket_{id}_{img}')
                    back = types.InlineKeyboardButton(text = 'üîö–ù–∞–∑–∞–¥', callback_data='all_clothes')
                    markup_order.row(button_busket, back)
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=
                                            f'–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: {name}\n'+
                                            f'–¶—ñ–Ω–∞: {price}$\n'+
                                            f'–û–ø–∏—Å: {discr}\n'+
                                            f'<a href="{img}">&#8205;</a>'
                                            ,reply_markup=markup_order,disable_web_page_preview=False)
            else:
                bot.answer_callback_query(callback_query_id=call.id, text='–ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î!')
        except Exception as e:
            print(e)

    # –ú–µ–Ω—é –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫
    if req[0] == 'new':
        try:
            name_table = req[0]
            all_new_clothes = db.fetch_types_clothes(name_table)
            all_count = db.get_all_count(name_table)
            if all_new_clothes:
                current_product = all_new_clothes[0]
                id, name, price, discr, img = current_product
                print(id, name, price, discr, img)
                new_clothes_buttons = types.InlineKeyboardMarkup()
                new_clothes_button = types.InlineKeyboardButton(text=f'{id} / {all_count}', callback_data='b')
                new_clothes_next = types.InlineKeyboardButton(text=f'>', callback_data=f'right_{id+1}_{name_table}')
                new_clothes_back = types.InlineKeyboardButton(text=f'<', callback_data=f'left_{id-1}_{name_table}')
                new_clothes_buttons.row(new_clothes_back, new_clothes_button, new_clothes_next)
                button_busket = types.InlineKeyboardButton(text = 'üõç –í –∫–æ—à–∏–∫', callback_data=f'inbasket_{id}_{img}')
                back = types.InlineKeyboardButton(text = 'üîö–ù–∞–∑–∞–¥', callback_data='all_clothes')
                new_clothes_buttons.row(button_busket, back)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=
                                            f'–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: {name}\n'+
                                            f'–¶—ñ–Ω–∞: {price}$\n'+
                                            f'–û–ø–∏—Å: {discr}\n'+
                                            f'<a href="{img}">&#8205;</a>'
                                            ,reply_markup=new_clothes_buttons,disable_web_page_preview=False)
        except Exception as e:
            print(e)


    # –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–¥ (adminka)
    if call.data == 'add-product-menu':
        try:
            add_buttons = types.InlineKeyboardMarkup(row_width=1)
            buttonadd = types.InlineKeyboardButton(text='üß¢ –ì–æ–ª–æ–≤–Ω–∏–π —É–±—ñ—Ä', callback_data=f'add_headdress')
            button1add = types.InlineKeyboardButton(text='üëï –í–µ—Ä—Ö–Ω—ñ–π –æ–¥—è–≥', callback_data=f'add_outerwear')
            button2add = types.InlineKeyboardButton(text='üëñ –ù–∏–∂–Ω—ñ–π –æ–¥—è–≥', callback_data=f'add_underwear')
            button3add = types.InlineKeyboardButton(text='üëü –í–∑—É—Ç—Ç—è', callback_data=f'add_shoes')
            button4add = types.InlineKeyboardButton(text='ü™¨ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', callback_data=f'add_accessories')
            button5add = types.InlineKeyboardButton(text='üî• –ù–æ–≤—ñ –ø–æ—Å—Ç–∞–≤–∫–∏ ', callback_data=f'add_new')
            button6add = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'back-admin')
            add_buttons.add(buttonadd, button1add, button2add, button3add, button4add, button5add, button6add)
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text='‚ôøÔ∏è–í—ã–±–∏—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å‚ôøÔ∏è', reply_markup=add_buttons)
        except Exception as e:
            print(e)

    # –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (adminka)
    if call.data == 'edit-product-menu':
        try:
            edit_buttons = types.InlineKeyboardMarkup(row_width=1)
            buttonedit = types.InlineKeyboardButton(text='üß¢ –ì–æ–ª–æ–≤–Ω–∏–π —É–±—ñ—Ä', callback_data=f'editmenu_headdress')
            button1edit = types.InlineKeyboardButton(text='üëï –í–µ—Ä—Ö–Ω—ñ–π –æ–¥—è–≥', callback_data=f'editmenu_outerwear')
            button2edit = types.InlineKeyboardButton(text='üëñ –ù–∏–∂–Ω—ñ–π –æ–¥—è–≥', callback_data=f'editmenu_underwear')
            button3edit = types.InlineKeyboardButton(text='üëü –í–∑—É—Ç—Ç—è', callback_data=f'editmenu_shoes')
            button4edit = types.InlineKeyboardButton(text='ü™¨ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', callback_data=f'editmenu_accessories')
            button5edit = types.InlineKeyboardButton(text='üî• –ù–æ–≤—ñ –ø–æ—Å—Ç–∞–≤–∫–∏ ', callback_data=f'editmenu_new')
            button6edit = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'back-admin')
            edit_buttons.add(buttonedit, button1edit, button2edit, button3edit, button4edit, button5edit, button6edit)
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text='‚ôøÔ∏è–í—ã–±–∏—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å‚ôøÔ∏è', reply_markup=edit_buttons)
        except Exception as e:
            print(e)

    # –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (adminka)
    if req[0] == 'editmenu':
        try:
            type_clothes = req[1]
            result = db.fetch_id_in_db(table=type_clothes)
            if result == None:
                bot.send_message(call.from_user.id, text='‚ùï–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó‚ùï')
            else:
                markup = types.InlineKeyboardMarkup(row_width=2)
                for i in result:
                    id = i[0]
                    name = i[1]
                    button = types.InlineKeyboardButton(text = f'{name}', callback_data=f'edit-one_{id}_{type_clothes}')
                    button_delete = types.InlineKeyboardButton(text='‚ùå', callback_data=f'delete-button_{id}_{type_clothes}')
                    button_back = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'edit-product-menu')
                    markup.add(button, button_delete)
                markup.add(button_back)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text='‚ôøÔ∏è–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:‚ôøÔ∏è', reply_markup=markup)
        except Exception as e:
            print(e)

    # –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞ (adminka)
    if req[0] == 'edit-one':
        try:
            id = req[1]
            table = req[2]
            edit_buttons = types.InlineKeyboardMarkup()
            edit_button1 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data=f'edit-order_photo_{id}_{table}')
            edit_button2 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data=f'edit-order_name_{id}_{table}')
            edit_button3 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', callback_data=f'edit-order_price_{id}_{table}')
            edit_button4 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–Ω–∏–µ', callback_data=f'edit-order_descr_{id}_{table}')
            edit_button5 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'editmenu_{table}')
            edit_buttons.add(edit_button1, edit_button2, edit_button3, edit_button4, edit_button5)
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text=f'–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup = edit_buttons)
        except Exception as e:
            print(e)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (adminka)
    if req[0] == 'edit-order':
        try:
            filter = req[1]
            id = req[2]
            table = req[3]
            time_text  = ''
            if filter == 'photo':
                time_text  = '–§–æ—Ç–æ'
            if filter == 'name':
                time_text  = '–ù–∞–∑–≤–∞–Ω–∏–µ'
            if filter == 'price':
                time_text  = '–¶–µ–Ω–∞'
            if filter == 'descr':
                time_text  = '–û–ø–∏—Å–∞–Ω–∏–µ'
            msg = bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: [{time_text}]')
            bot.register_next_step_handler(msg,edit_order,id,table,time_text)
        except Exception as e:
            print(e)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    if req[0] == 'inbasket':
        try:
            id = req[1]
            img = req[2]
            if db.is_product_in_basket(call.from_user.id, img):
                bot.answer_callback_query(callback_query_id=call.id, text='–£–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ!')
            else:
                if db.add_to_basket(call.from_user.id, img):
                    bot.answer_callback_query(callback_query_id=call.id, text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')
                else:
                    bot.answer_callback_query(callback_query_id=call.id, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!')
        except Exception as e:
            print(e)

    # –ú–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if call.data == 'basket':
        try:
            user_id = call.from_user.id
            basket_items = db.fetch_basket_items(user_id)
            count = db.get_all_count_basket(user_id)
            list_dasdasd = db.get_id(user_id)
            
            listok = []
            for item in list_dasdasd:
                listok.append(item[0])  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ –≤ —Å–ø–∏—Å–æ–∫

            if basket_items:
                number_id = 0
                id, image = basket_items[number_id]
                current_id = number_id

                markup_order = types.InlineKeyboardMarkup()
                prev = types.InlineKeyboardButton(text='<', callback_data=f'prev_{number_id}_{listok}')
                button = types.InlineKeyboardButton(text=f' {number_id + 1} / {count}', callback_data='b')
                next_product = types.InlineKeyboardButton(text='>', callback_data=f'next_{number_id}_{listok}')
                send_BOG = types.InlineKeyboardButton(text='–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data=f'sendbog_{image}')
                deletebuttons = types.InlineKeyboardButton(text='‚ùå', callback_data=f'delete2_{current_id}_{listok}')
                back1 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back1')
                markup_order.add(prev, button, next_product, back1, send_BOG, deletebuttons)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=
                                    f'–ö–æ—Ä–∑–∏–Ω–∞:\n{image}', reply_markup=markup_order, disable_web_page_preview=False)
            else:
                bot.answer_callback_query(callback_query_id=call.id, text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')
        except Exception as e:
            print(e)
    
    # –õ–∏—Å—Ç–∞–Ω–∏–µ –æ–¥–µ–∂–¥—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if req[0] == 'prev' or req[0] == 'next':
        try:
            number_id = int(req[1])
            listok = req[2]

            if req[0] == 'prev':
                number_id -= 1
            elif req[0] == 'next':
                number_id += 1

            user_id = call.from_user.id
            basket_items = db.fetch_basket_items(user_id)
            count = db.get_all_count_basket(user_id)

            if 0 <= number_id < len(basket_items):
                id, image = basket_items[number_id]
                markup_order = types.InlineKeyboardMarkup()

                prev = types.InlineKeyboardButton(text='<', callback_data=f'prev_{number_id}_{listok}')
                button = types.InlineKeyboardButton(text=f' {number_id + 1} / {count}', callback_data='b')
                next_product = types.InlineKeyboardButton(text='>', callback_data=f'next_{number_id}_{listok}')
                send_BOG = types.InlineKeyboardButton(text='–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data=f'sendbog_{image}')
                deletebuttons = types.InlineKeyboardButton(text='‚ùå', callback_data=f'delete2_{number_id}_{listok}')
                back1 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back1')

                markup_order.add(prev, button, next_product, back1, send_BOG, deletebuttons)

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=
                                    f'–ö–æ—Ä–∑–∏–Ω–∞: {image}', reply_markup=markup_order, disable_web_page_preview=False)
            else:
                bot.answer_callback_query(callback_query_id=call.id, text='–ë—ñ–ª—å—à–µ –Ω—ñ–∫—É–¥–∏!')
        except Exception as e:
            print(e)

    # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –±–¥ (adminka)
    if req[0] == 'add':
        try:
            products_info = req[1]
            msg_url = bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º: @tlgur_bot")
            bot.register_next_step_handler(msg_url, upload_photo_and_ask_name,products_info)
        except Exception as e:
            print(e)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    if req[0] == 'sendbog':
        try:
            image_product = req[1]
            username = db.get_login_user(call.from_user.id)
            if username == None:
                bot.send_message(call.from_user.id, text='‚ùóÔ∏è –í –≤–∞—Å –Ω–µ–º–∞—î –ª–æ–≥—ñ–Ω–∞ –≤–∞—à–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º, –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ - üá∫üá¶0999999999, —â–æ–± –º–∏ –∑ –≤–∞–º–∏ –∑–≤\'—è–∑–∞–ª–∏—Å—è –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ ‚ùóÔ∏è')
                username = call.message.text
                bot.register_next_step_handler(call.message, send_phone_number, image_product)
            else:
                id_product = db.get_product_id_in_basket(call.from_user.id)
                count = db.get_all_count_basket(call.from_user.id)
                bot.answer_callback_query(callback_query_id=call.id, text='–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ!')
                bot.send_message(6198791765, text='------------------------------')
                bot.send_message(6198791765, text=f'–ö–ª—ñ—î–Ω—Ç @{username[0]} —Å—Ç–≤–æ—Ä–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!')
                url_buttons = types.InlineKeyboardMarkup()
                url_button = types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', url=f'https://t.me/{username[0]}')
                url_buttons.add(url_button)
                for i in id_product:
                    basket_items = db.fetch_basket_items(call.from_user.id)
                    if basket_items:
                        id, image = basket_items[0]
                        bot.send_message(chat_id=6198791765, text=f'–ó–∞–∫–∞–∑:\n<a href="{image}">&#8205;</a>', reply_markup=url_buttons)
        except Exception as e:
            print(e)

    if call.data == 'send-all-users':
        try:
            all_users = db.get_all_id()
            for user_id in all_users:
                bot.send_message(user_id, text='üî• –£–≤–∞–≥–∞! –ó\'—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π –æ–¥—è–≥ üî•')
            bot.send_message(call.from_user.id, text="üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–æ–≤–∞—è –æ–¥–µ–∂–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        except Exception as e:
            print(e)

    if req[0] == 'delete-button':
        try:
            id = req[1]
            name_table = req[2]
            db.delete_product(id, name_table)
            result = db.fetch_id_in_db(table=name_table)
            if result is None:
                bot.send_message(call.from_user.id, text='‚ùï–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó‚ùï')
                admin(call.message)
            else:
                markup = types.InlineKeyboardMarkup(row_width=2)
                for i in result:
                    id = i[0]
                    name = i[1]
                    button = types.InlineKeyboardButton(text=f'{name}', callback_data=f'edit-one_{id}_{name_table}')
                    button_delete = types.InlineKeyboardButton(text='‚ùå', callback_data=f'delete-button_{id}_{name_table}')
                    button_back = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='edit-product-menu')
                    markup.add(button, button_delete)
                markup.add(button_back)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='‚ôøÔ∏è–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:‚ôøÔ∏è', reply_markup=markup)
        except Exception as e:
            print(e)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if req[0] == 'delete2':
        try:
            number_id = int(req[1])
            list_id = req[2]
            basket_items = db.fetch_basket_items(call.from_user.id)
            listok = ast.literal_eval(list_id)
            count = db.get_all_count_basket(call.from_user.id)
            db.delete_product(listok[number_id], 'basket')
            bot.delete_message(call.message.chat.id, call.message.message_id)
            basket(call.message)
        except:
            start(call.message)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if call.data == 'back1':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        start(call.message)
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (admin)
    if call.data == 'back-admin':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        admin(call.message)

    db.close()

#<!-----------------------------------------------------------------------------------
# –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –±–¥
def upload_photo_and_ask_name(message,products_info):
    try:
        msg_url = message.text
        msg_name = bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message_id - 1, text ='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        bot.register_next_step_handler(msg_name, ask_name_product,msg_url,products_info)
    except Exception as e:
        print(e)

# –ó–∞–ø–∏—Å–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ –≤ –±–¥
def edit_order(message,id,table,time_text):
    try:
        db = Databases("database.db")
        db.connect()
        msg = message.text
        value = ''
        if time_text == '–§–æ—Ç–æ':
            value = 'image_url'
        if time_text == '–ù–∞–∑–≤–∞–Ω–∏–µ':
            value = 'name'
        if time_text == '–¶–µ–Ω–∞':
            value = 'price'
        if time_text == '–û–ø–∏—Å–∞–Ω–∏–µ':
            value = 'descr'
        bot.edit_message_text(chat_id=message.from_user.id,message_id=message.message_id - 1,text = f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞: {msg}')
        bot.delete_message(chat_id=message.from_user.id,message_id=message.message_id)
        db.edit_one_order(id = id, table = table,info = msg,value=value)
        admin(message)
        db.close()
    except Exception as e:
        print(e)

# –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –±–¥. –ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è
def ask_name_product(message, msg_url,products_info):
    try:
        msg_name = message.text
        msg_price = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.")
        bot.register_next_step_handler(msg_price, ask_price_product, msg_name, msg_url,products_info)
    except Exception as e:
        print(e)

# –ß–µ—Ç–≤—ë—Ä—Ç–∞—è —á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ó–∞–ø–∏—Å—å –¶–µ–Ω—ã
def ask_price_product(message,msg_url,msg_name,products_info):
    try:
        msg_price = message.text
        msg_discr = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
        bot.register_next_step_handler(msg_discr, ask_description_and_insert_product,msg_url,msg_name,msg_price,products_info)
    except Exception as e:
        print(e)

# –ü—è—Ç–∞—è —á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä
def ask_description_and_insert_product(message, msg_url,msg_name,msg_price,products_info):
    try:
        msg_discr = message.text
        db = Databases("database.db")
        db.connect()

        db.insert_clothes(msg_url, msg_price, msg_discr, msg_name, products_info)
        bot.send_message(message.from_user.id, f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

        admin(message)
        db.close()
    except Exception as e:
        print(e)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–∏–Ω–∞ –≤ —Ç–µ–ª–µ–≥–µ
def send_phone_number(message, image_product):
    try:
        number = message.text
        bot.send_message(message.chat.id, text='–ó–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, –∑ –≤–∞–º–∏ –∑–≤\'—è–∂–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤–µ—Ü—å üíå')
        bot.send_message(6198791765, text=f'üõç –ö–ª—ñ—î–Ω—Ç +38{number} –∑—Ä–æ–±–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üõç\n{image_product}')
    except:
        bot.send_message(message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑üëÅ‚Äçüó®')


# –û–ª–¥—Å–∫—É–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
def send_main_menu(message):
    main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu_button = types.KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    main_menu_markup.add(menu_button)
    bot.send_message(message.from_user.id, '', reply_markup=main_menu_markup)
